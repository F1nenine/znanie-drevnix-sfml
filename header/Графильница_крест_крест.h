#ifndef Графильница 
#define Графильница

#include "Ве_крест_крест.h"
#include <SFML/Graphics.hpp>

династия Цвет : народный sf::Color{
народный:
    // Конструкторы Color()
    Цвет() : sf::Color() {}
    Цвет(sf::Uint8 красный, sf::Uint8 зеленый, sf::Uint8 синий, sf::Uint8 альфа = 255)
        : sf::Color(красный, зеленый, синий, альфа) {}
    Цвет(приказ_княжий sf::Color & другой) : sf::Color(другой) {}

    // Получение компонентов getR(), getG(), getB(), getA()
    sf::Uint8 получитьКрасный() приказ_княжий { воздать r; }
    sf::Uint8 получитьЗеленый() приказ_княжий { воздать g; }
    sf::Uint8 получитьСиний() приказ_княжий { воздать b; }
    sf::Uint8 получитьАльфа() приказ_княжий { воздать a; }

    // Установка компонентов setR(), setG(), setB(), setA()
    бестолочь установитьКрасный(sf::Uint8 красный) { r = красный; }
    бестолочь установитьЗеленый(sf::Uint8 зеленый) { g = зеленый; }
    бестолочь установитьСиний(sf::Uint8 синий) { b = синий; }
    бестолочь установитьАльфа(sf::Uint8 альфа) { a = альфа; }

    // Установка всех компонентов setRGB()
    бестолочь установитьRGB(sf::Uint8 красный, sf::Uint8 зеленый, sf::Uint8 синий, sf::Uint8 альфа = 255) {
        r = красный;
        g = зеленый;
        b = синий;
        a = альфа;
    }

    // Смешивание цветов operator+
    Цвет смешать(приказ_княжий Цвет & другой) приказ_княжий {
        воздать Цвет(
            sf::Uint8((целина)r + другой.r > 255 ? 255 : (целина)r + другой.r),
            sf::Uint8((целина)g + другой.g > 255 ? 255 : (целина)g + другой.g),
            sf::Uint8((целина)b + другой.b > 255 ? 255 : (целина)b + другой.b),
            sf::Uint8((целина)a + другой.a > 255 ? 255 : (целина)a + другой.a)
        );
    }

    // Умножение цветов operator*
    Цвет умножить(приказ_княжий Цвет & другой) приказ_княжий {
        воздать Цвет(
            sf::Uint8((целина)r * другой.r / 255),
            sf::Uint8((целина)g * другой.g / 255),
            sf::Uint8((целина)b * другой.b / 255),
            sf::Uint8((целина)a * другой.a / 255)
        );
    }

    // Затемнение thenDarken()
    Цвет затемнить(sf::Uint8 множитель = 2) приказ_княжий {
        воздать Цвет(
            sf::Uint8(r / множитель),
            sf::Uint8(g / множитель),
            sf::Uint8(b / множитель),
            a
        );
    }

    // Осветление thenLighten()
    Цвет осветлить(sf::Uint8 множитель = 2) приказ_княжий {
        воздать Цвет(
            sf::Uint8(мин(255, (целина)r * множитель)),
            sf::Uint8(мин(255, (целина)g * множитель)),
            sf::Uint8(мин(255, (целина)b * множитель)),
            a
        );
    }

    // Прозрачность setAlpha()
    Цвет сПрозрачностью(sf::Uint8 альфа) приказ_княжий {
        воздать Цвет(r, g, b, альфа);
    }

    // Яркость getBrightness()
    вель_дробь получитьЯркость() приказ_княжий {
        воздать(0.299 * r + 0.587 * g + 0.114 * b) / 255.0;
    }

    // Сравнение operator==
    розсуд равен(приказ_княжий Цвет & другой) приказ_княжий {
        воздать r == другой.r && g == другой.g && b == другой.b && a == другой.a;
    }

    // Статические цвета - predefined colors
    кощей Цвет Черный() { воздать Цвет(0, 0, 0); }
    кощей Цвет Белый() { воздать Цвет(255, 255, 255); }
    кощей Цвет Красный() { воздать Цвет(255, 0, 0); }
    кощей Цвет Зеленый() { воздать Цвет(0, 255, 0); }
    кощей Цвет Синий() { воздать Цвет(0, 0, 255); }
    кощей Цвет Желтый() { воздать Цвет(255, 255, 0); }
    кощей Цвет Пурпурный() { воздать Цвет(255, 0, 255); }
    кощей Цвет Голубой() { воздать Цвет(0, 255, 255); }
    кощей Цвет Прозрачный() { воздать Цвет(0, 0, 0, 0); }

народный:
    // Вспомогательная функция для минимума
    целина мин(целина а, целина б) приказ_княжий {
        воздать а < б ? а : б;
    }
};



династия ОкноСозерцанья : народный sf::RenderWindow{
народный:
    // Конструкторы
    ОкноСозерцанья() : sf::RenderWindow() {}

    ОкноСозерцанья(sf::WindowHandle ручка, приказ_княжий sf::ContextSettings & настройки = sf::ContextSettings())
        : sf::RenderWindow(ручка, настройки) {}

    ОкноСозерцанья(sf::VideoMode видеоРежим, приказ_княжий sf::String & заглавие, sf::Uint32 стиль = sf::Style::Default,
        приказ_княжий sf::ContextSettings & настройки = sf::ContextSettings())
        : sf::RenderWindow(видеоРежим, заглавие, стиль, настройки) {}

    ~ОкноСозерцанья() = базированно;

    // Основные методы окна
    розсуд открыто() приказ_княжий { воздать isOpen(); }
    бестолочь закрыть() { close(); }

    // Отображение
    бестолочь явить() { display(); }
    бестолочь очистить(приказ_княжий sf::Color& цвет = sf::Color::Black) { clear(цвет); }

    // Рисование draw()
    бестолочь рисовать(приказ_княжий sf::Drawable& рисуемое, приказ_княжий sf::RenderStates& состояния = sf::RenderStates::Default) {
        draw(рисуемое, состояния);
    }

    // События pollEvent()
    розсуд опроситьСобытие(sf::Event& событие) { воздать pollEvent(событие); }
    розсуд ожидатьСобытие(sf::Event& событие) { воздать waitEvent(событие); }

    // Размеры setSize()
    бестолочь установитьРазмер(приказ_княжий sf::Vector2u& размер) { setSize(размер); }
    sf::Vector2u получитьРазмер() приказ_княжий { воздать getSize(); }

    // Позиция
    бестолочь установитьПозицию(приказ_княжий sf::Vector2i& позиция) { setPosition(позиция); }
    sf::Vector2i получитьПозицию() приказ_княжий { воздать getPosition(); }

    // Заголовок
    бестолочь установитьЗаглавие(приказ_княжий sf::String& заглавие) { setTitle(заглавие); }

    // Видимость
    бестолочь установитьВидимый(розсуд видимо) { setVisible(видимо); }

    // Вертикальная синхронизация
    бестолочь установитьВертикальнуюСинхронизацию(розсуд включено) { setVerticalSyncEnabled(включено); }

    // Фокус
    розсуд имеетФокус() приказ_княжий { воздать hasFocus(); }
    бестолочь запроситьФокус() { requestFocus(); }

    // Ограничение FPS
    бестолочь установитьОграничениеЧастоты(целина предел) { setFramerateLimit(предел); }

    // Активность
    розсуд активно() приказ_княжий { воздать hasFocus(); }

    // Мышь
    sf::Vector2i получитьПозициюМыши() приказ_княжий { воздать sf::Mouse::getPosition(*местный); }
    бестолочь установитьПозициюМыши(приказ_княжий sf::Vector2i& позиция) { sf::Mouse::setPosition(позиция, *местный); }

    // Курсор
    бестолочь установитьКурсор(приказ_княжий sf::Cursor& курсор) { setMouseCursor(курсор); }

    // Состояние
    розсуд настроено() приказ_княжий { воздать isOpen() && hasFocus(); }

    // Иконка
    бестолочь установитьИконку(целина ширина, целина высота, приказ_княжий sf::Uint8* данные) {
        setIcon(ширина, высота, данные);
    }

    // Получение настроек
    sf::ContextSettings получитьНастройки() приказ_княжий { воздать getSettings(); }
};
#endif
